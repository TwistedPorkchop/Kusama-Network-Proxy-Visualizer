{"dependencies":[{"name":"../hex/toBn.js","loc":{"line":3,"column":24}},{"name":"../is/bigInt.js","loc":{"line":4,"column":25}},{"name":"../is/hex.js","loc":{"line":5,"column":22}},{"name":"../is/toBigInt.js","loc":{"line":6,"column":27}},{"name":"../is/toBn.js","loc":{"line":7,"column":23}},{"name":"./bn.js","loc":{"line":8,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bnToBn = bnToBn;\n\nvar _toBn = require(\"../hex/toBn.js\");\n\nvar _bigInt = require(\"../is/bigInt.js\");\n\nvar _hex = require(\"../is/hex.js\");\n\nvar _toBigInt = require(\"../is/toBigInt.js\");\n\nvar _toBn2 = require(\"../is/toBn.js\");\n\nvar _bn = require(\"./bn.js\");\n\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction bnToBn(value) {\n  return value ? _bn.BN.isBN(value) ? value : (0, _hex.isHex)(value) ? (0, _toBn.hexToBn)(value.toString()) : (0, _bigInt.isBigInt)(value) ? new _bn.BN(value.toString()) : (0, _toBn2.isToBn)(value) ? value.toBn() : (0, _toBigInt.isToBigInt)(value) ? new _bn.BN(value.toBigInt().toString()) : new _bn.BN(value) : new _bn.BN(0);\n}"},"hash":"6e7a717d8fef6c23364d146158f20fb3"}