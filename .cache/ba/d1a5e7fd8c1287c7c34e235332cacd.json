{"id":"homepage.html","dependencies":[{"name":"./style.css","dynamic":true,"resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\style.css","parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\homepage.html"},{"name":"./app.js","dynamic":true,"resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\app.js","parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\homepage.html"}],"generated":{"html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <!-- My Code -->\r\n    <link rel=\"stylesheet\" href=\"/da232d78aa810382f2dcdceae308ff8e.css\">\r\n\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n\r\n\r\n<title>Kusama Network Proxy Visualizer</title>\r\n</head>\r\n<body>\r\n    \r\n    <header>\r\n        <div class=\"Nav\">\r\n            Home           \r\n        </div>\r\n        <div class=\"Nav\" onclick=\"draw()\">\r\n            draw           \r\n        </div>\r\n        <div class=\"Nav\">\r\n            Option 3           \r\n        </div>\r\n        <div class=\"Nav\">\r\n            Option 4            \r\n        </div>\r\n        \r\n    </header>\r\n\r\n    <div class=\"MainRow\">\r\n\r\n    <aside>\r\n        <p>SideBar</p>\r\n    </aside>\r\n\r\n    <section>\r\n\r\n        <canvas id=\"viewport\"></canvas>\r\n\r\n    </section>\r\n    </div>\r\n\r\n    <footer>\r\n        <p>Footer</p>\r\n    </footer>\r\n\r\n    <!--\r\n     particle system of arbour. Must include arbor.js file\r\n    <script src=\"node_modules/jquery/dist/jquery.min.js\"></script>\r\n    <script src=\"lib/arbor.js\"></script>  \r\n\r\n     to let arbor handle realtime color and value tweens.this will add a pair of new tweening methods to the ParticleSystem object. Must include arbor-tween.js file \r\n         Tweening is the easisit way to create animated objects. Tweening is the process of generating in between frames\r\n        i.e. developing frames between two images to create a appearance in which first image generate its replica into the second image. \r\n    <script src=\"lib/arbor-tween.js\"></script>\r\n        -->\r\n\r\n    <!-- My Code -->\r\n    <script type=\"module\" src=\"/0364f57fbff2fabbe941ed20c328ef1a.js\"></script> \r\n</body>\r\n</html>\r\n\r\n<!-- npm run dev -->"},"sourceMaps":null,"error":null,"hash":"d187ea15c564b8f2e12fe629b0330fbf","cacheData":{}}