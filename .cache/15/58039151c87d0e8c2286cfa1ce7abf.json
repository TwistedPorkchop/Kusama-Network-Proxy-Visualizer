{"id":"node_modules/@polkadot/util/compact/index.js","dependencies":[{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\package.json","includedInParent":true,"mtime":1657830835014},{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\package.json","includedInParent":true,"mtime":1657539547526},{"name":"./addLength.js","loc":{"line":24,"column":33,"index":1001},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\index.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\addLength.js"},{"name":"./stripLength.js","loc":{"line":25,"column":35,"index":1054},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\index.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\stripLength.js"},{"name":"./fromU8a.js","loc":{"line":26,"column":50,"index":1124},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\index.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\fromU8a.js"},{"name":"./toU8a.js","loc":{"line":27,"column":29,"index":1169},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\index.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util\\compact\\toU8a.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"compactAddLength\", {\n  enumerable: true,\n  get: function () {\n    return _addLength.compactAddLength;\n  }\n});\nObject.defineProperty(exports, \"compactFromU8a\", {\n  enumerable: true,\n  get: function () {\n    return _fromU8a.compactFromU8a;\n  }\n});\nObject.defineProperty(exports, \"compactFromU8aLim\", {\n  enumerable: true,\n  get: function () {\n    return _fromU8a.compactFromU8aLim;\n  }\n});\nObject.defineProperty(exports, \"compactStripLength\", {\n  enumerable: true,\n  get: function () {\n    return _stripLength.compactStripLength;\n  }\n});\nObject.defineProperty(exports, \"compactToU8a\", {\n  enumerable: true,\n  get: function () {\n    return _toU8a.compactToU8a;\n  }\n});\n\nvar _addLength = require(\"./addLength.js\");\n\nvar _stripLength = require(\"./stripLength.js\");\n\nvar _fromU8a = require(\"./fromU8a.js\");\n\nvar _toU8a = require(\"./toU8a.js\");"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":37,"column":0},"source":"node_modules/@polkadot/util/compact/index.js","original":{"line":24,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@polkadot/util/compact/index.js","original":{"line":25,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@polkadot/util/compact/index.js","original":{"line":26,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@polkadot/util/compact/index.js","original":{"line":27,"column":0}}],"sources":{"node_modules/@polkadot/util/compact/index.js":"// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @description\n * Encoding and decoding of parity-codec compact numbers. The codec is created\n * to take up the least amount of space for a specific number. It performs the\n * same function as Length, however differs in that it uses a variable number of\n * bytes to do the actual encoding. From the Rust implementation for compact\n * encoding:\n *\n *     0b00 00 00 00 / 00 00 00 00 / 00 00 00 00 / 00 00 00 00\n * (0 ... 2**6 - 1)    (u8)\n *     xx xx xx 00\n * (2**6 ... 2**14 - 1)  (u8, u16)  low LH high\n *     yL yL yL 01 / yH yH yH yL\n * (2**14 ... 2**30 - 1)  (u16, u32)  low LMMH high\n *     zL zL zL 10 / zM zM zM zL / zM zM zM zM / zH zH zH zM\n * (2**30 ... 2**536 - 1)  (u32, u64, u128, U256, U512, U520) straight LE-encoded\n *     nn nn nn 11 [ / zz zz zz zz ]{4 + n}\n *\n * Note: we use *LOW BITS* of the LSB in LE encoding to encode the 2 bit key.\n */\nexport { compactAddLength } from \"./addLength.js\";\nexport { compactStripLength } from \"./stripLength.js\";\nexport { compactFromU8a, compactFromU8aLim } from \"./fromU8a.js\";\nexport { compactToU8a } from \"./toU8a.js\";"},"lineCount":null}},"error":null,"hash":"8dc8507ae377ad9d9e449d90a5766470","cacheData":{"env":{}}}