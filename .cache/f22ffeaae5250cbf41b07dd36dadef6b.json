{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":23}},{"name":"../../ed25519/index.js","loc":{"line":4,"column":36}},{"name":"../../mnemonic/index.js","loc":{"line":5,"column":33}},{"name":"../validatePath.js","loc":{"line":6,"column":41}},{"name":"./derivePrivate.js","loc":{"line":7,"column":36}},{"name":"./master.js","loc":{"line":8,"column":29}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hdLedger = hdLedger;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _index = require(\"../../ed25519/index.js\");\n\nvar _index2 = require(\"../../mnemonic/index.js\");\n\nvar _validatePath = require(\"../validatePath.js\");\n\nvar _derivePrivate = require(\"./derivePrivate.js\");\n\nvar _master = require(\"./master.js\");\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction hdLedger(_mnemonic, path) {\n  const words = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);\n\n  (0, _util.assert)([12, 24, 25].includes(words.length), 'Expected a mnemonic with 24 words (or 25 including a password)');\n  const [mnemonic, password] = words.length === 25 ? [words.slice(0, 24).join(' '), words[24]] : [words.join(' '), ''];\n  (0, _util.assert)((0, _index2.mnemonicValidate)(mnemonic), 'Invalid mnemonic passed to ledger derivation');\n  (0, _util.assert)((0, _validatePath.hdValidatePath)(path), 'Invalid derivation path');\n  const parts = path.split('/').slice(1);\n  let seed = (0, _master.ledgerMaster)(mnemonic, password);\n\n  for (const p of parts) {\n    const n = parseInt(p.replace(/'$/, ''), 10);\n    seed = (0, _derivePrivate.ledgerDerivePrivate)(seed, n < _validatePath.HARDENED ? n + _validatePath.HARDENED : n);\n  }\n\n  return (0, _index.ed25519PairFromSeed)(seed.slice(0, 32));\n}"},"hash":"fb69e491bd88f506dbf86a90bb7396f7"}