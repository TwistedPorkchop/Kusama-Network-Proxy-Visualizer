{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.u8aToNumber = u8aToNumber;\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name u8aToNumber\n * @summary Creates a number from a Uint8Array object.\n */\nfunction u8aToNumber(value, {\n  isNegative = false\n} = {}) {\n  const count = value.length;\n\n  if (isNegative) {\n    let result = 0;\n\n    switch (count) {\n      case 0:\n        return 0;\n\n      case 1:\n        result = value[0] ^ 0x000000ff;\n        break;\n\n      case 2:\n        result = value[0] + (value[1] << 8) ^ 0x0000ffff;\n        break;\n\n      case 3:\n        result = value[0] + (value[1] << 8) + (value[2] << 16) ^ 0x00ffffff;\n        break;\n\n      case 4:\n        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n        // 32-bit, in the case where the top-most bit is set this yields a negative value\n        result = value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff;\n        break;\n\n      case 5:\n        result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] ^ 0xff) * 0x100000000;\n        break;\n\n      case 6:\n        result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] + (value[5] << 8) ^ 0x0000ffff) * 0x100000000;\n        break;\n\n      default:\n        throw new Error('Value more than 48-bits cannot be reliably converted');\n    }\n\n    return result * -1 - 1;\n  }\n\n  switch (count) {\n    case 0:\n      return 0;\n\n    case 1:\n      return value[0];\n\n    case 2:\n      return value[0] + (value[1] << 8);\n\n    case 3:\n      return value[0] + (value[1] << 8) + (value[2] << 16);\n\n    case 4:\n      // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to\n      // 32-bit, in the case where the top-most bit is set this yields a negative value\n      return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000;\n\n    case 5:\n      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 0x1000000;\n\n    case 6:\n      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1000000;\n\n    default:\n      throw new Error('Value more than 48-bits cannot be reliably converted');\n  }\n}"},"hash":"0e341c9310bc46561f4ba07dc5d7ee6f"}