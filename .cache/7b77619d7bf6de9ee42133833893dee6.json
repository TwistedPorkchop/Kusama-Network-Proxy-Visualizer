{"dependencies":[{"name":"@polkadot/util","loc":{"line":4,"column":34}},{"name":"../base58/index.js","loc":{"line":5,"column":29}},{"name":"./decode.js","loc":{"line":6,"column":30}},{"name":"./defaults.js","loc":{"line":7,"column":25}},{"name":"./sshash.js","loc":{"line":8,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeAddress = encodeAddress;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _index = require(\"../base58/index.js\");\n\nvar _decode = require(\"./decode.js\");\n\nvar _defaults = require(\"./defaults.js\");\n\nvar _sshash = require(\"./sshash.js\");\n\nfunction encodeAddress(key, ss58Format = _defaults.defaults.prefix) {\n  // decode it, this means we can re-encode an address\n  const u8a = (0, _decode.decodeAddress)(key);\n  (0, _util.assert)(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');\n  (0, _util.assert)(_defaults.defaults.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${_defaults.defaults.allowedDecodedLengths.join(', ')}`);\n  const input = (0, _util.u8aConcat)(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);\n  return (0, _index.base58Encode)((0, _util.u8aConcat)(input, (0, _sshash.sshash)(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34"},"hash":"459c99cd052be5b00ee9c4b0d20ea09c"}