{"dependencies":[{"name":"@polkadot/x-bigint","loc":{"line":3,"column":23}},{"name":"./consts.js","loc":{"line":4,"column":35}},{"name":"./toBigInt.js","loc":{"line":5,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQRT_MAX_SAFE_INTEGER = undefined;\nexports.nSqrt = nSqrt;\n\nvar _xBigint = require(\"@polkadot/x-bigint\");\n\nvar _consts = require(\"./consts.js\");\n\nvar _toBigInt = require(\"./toBigInt.js\");\n\n/** @internal */\n\nconst SQRT_MAX_SAFE_INTEGER = exports.SQRT_MAX_SAFE_INTEGER = (0, _xBigint.BigInt)(94906265);\n/**\n * @name nSqrt\n * @summary Calculates the integer square root of a bigint\n */\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction nSqrt(value) {\n  const n = (0, _toBigInt.nToBigInt)(value);\n\n  if (n < _consts._0n) {\n    throw new Error('square root of negative numbers is not supported');\n  } // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n  // shortcut <= 2^53 - 1 to use the JS utils\n\n\n  if (n <= _consts._2pow53n) {\n    // ~~ is more performant that Math.floor\n    return (0, _xBigint.BigInt)(~~Math.sqrt(Number(n)));\n  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n  // output will be larger than this, we expect this to be a safe start\n\n\n  let x0 = SQRT_MAX_SAFE_INTEGER;\n\n  while (true) {\n    const x1 = n / x0 + x0 >> _consts._1n;\n\n    if (x0 === x1 || x0 === x1 - _consts._1n) {\n      return x0;\n    }\n\n    x0 = x1;\n  }\n}"},"hash":"6889d6c3846f13c9167d7f1221b9b313"}