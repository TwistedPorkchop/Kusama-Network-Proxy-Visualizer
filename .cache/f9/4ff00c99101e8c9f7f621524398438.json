{"id":"node_modules/@polkadot/types-codec/base/VecAny.js","dependencies":[{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\package.json","includedInParent":true,"mtime":1657538422482},{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\package.json","includedInParent":true,"mtime":1657539547205},{"name":"../abstract/Array.js","loc":{"line":3,"column":30,"index":137},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\base\\VecAny.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\abstract\\Array.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VecAny = void 0;\n\nvar _Array = require(\"../abstract/Array.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * @name VecAny\n * @description\n * This manages codec arrays, assuming that the inputs are already of type Codec. Unlike\n * a vector, this can be used to manage array-like structures with variable arguments of\n * any types\n */\nvar VecAny = /*#__PURE__*/function (_AbstractArray) {\n  _inherits(VecAny, _AbstractArray);\n\n  var _super = _createSuper(VecAny);\n\n  function VecAny() {\n    _classCallCheck(this, VecAny);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VecAny, [{\n    key: \"toRawType\",\n    value:\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    function toRawType() {\n      // FIXME This is basically an any type, cannot instantiate via createType\n      return 'Vec<Codec>';\n    }\n  }]);\n\n  return VecAny;\n}(_Array.AbstractArray);\n\nexports.VecAny = VecAny;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":3,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":4,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":5,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":6,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":7,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":8,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":9,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":10,"column":0}},{"generated":{"line":39,"column":4},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":12,"column":13},"name":"VecAny"},{"generated":{"line":53,"column":4},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":13,"column":2}},{"generated":{"line":54,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":14,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":15,"column":0}},{"generated":{"line":56,"column":4},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":16,"column":2}},{"generated":{"line":56,"column":25},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":16,"column":14}},{"generated":{"line":57,"column":6},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":17,"column":4}},{"generated":{"line":58,"column":6},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":18,"column":4}},{"generated":{"line":58,"column":13},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":18,"column":11}},{"generated":{"line":58,"column":25},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":18,"column":4}},{"generated":{"line":59,"column":4},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":19,"column":3}},{"generated":{"line":63,"column":2},"source":"node_modules/@polkadot/types-codec/base/VecAny.js","original":{"line":12,"column":28},"name":"AbstractArray"}],"sources":{"node_modules/@polkadot/types-codec/base/VecAny.js":"// Copyright 2017-2022 @polkadot/types-codec authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractArray } from \"../abstract/Array.js\";\n/**\n * @name VecAny\n * @description\n * This manages codec arrays, assuming that the inputs are already of type Codec. Unlike\n * a vector, this can be used to manage array-like structures with variable arguments of\n * any types\n */\n\nexport class VecAny extends AbstractArray {\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    // FIXME This is basically an any type, cannot instantiate via createType\n    return 'Vec<Codec>';\n  }\n\n}"},"lineCount":null}},"error":null,"hash":"6f836798695479e0b27770033cd1c4b2","cacheData":{"env":{}}}