{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":23}},{"name":"../key/index.js","loc":{"line":4,"column":31}},{"name":"../sr25519/index.js","loc":{"line":5,"column":36}},{"name":"./decode.js","loc":{"line":6,"column":30}},{"name":"./encode.js","loc":{"line":7,"column":30}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deriveAddress = deriveAddress;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _index = require(\"../key/index.js\");\n\nvar _index2 = require(\"../sr25519/index.js\");\n\nvar _decode = require(\"./decode.js\");\n\nvar _encode = require(\"./encode.js\");\n\nfunction filterHard({\n  isHard\n}) {\n  return isHard;\n}\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = (0, _index.keyExtractPath)(suri);\n  (0, _util.assert)(path.length && !path.every(filterHard), 'Expected suri to contain a combination of non-hard paths');\n  let publicKey = (0, _decode.decodeAddress)(who);\n\n  for (const {\n    chainCode\n  } of path) {\n    publicKey = (0, _index2.sr25519DerivePublic)(publicKey, chainCode);\n  }\n\n  return (0, _encode.encodeAddress)(publicKey, ss58Format);\n}"},"hash":"07c42440c037a6f2f22c1ba8c39ffda7"}