{"dependencies":[{"name":"@noble/secp256k1","loc":{"line":3,"column":36}},{"name":"@polkadot/util","loc":{"line":4,"column":46}},{"name":"@polkadot/wasm-crypto","loc":{"line":5,"column":47}},{"name":"../bn.js","loc":{"line":6,"column":31}},{"name":"./hasher.js","loc":{"line":7,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secp256k1Sign = secp256k1Sign;\n\nvar _secp256k = require(\"@noble/secp256k1\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _bn = require(\"../bn.js\");\n\nvar _hasher = require(\"./hasher.js\");\n\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, {\n  secretKey\n}, hashType = 'blake2', onlyJs) {\n  if ((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) !== 32) {\n    throw new Error('Expected valid secp256k1 secretKey, 32-bytes');\n  }\n\n  const data = (0, _hasher.hasher)(hashType, message, onlyJs);\n\n  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {\n    return (0, _wasmCrypto.secp256k1Sign)(data, secretKey);\n  }\n\n  const [sigBytes, recoveryParam] = (0, _secp256k.signSync)(data, secretKey, {\n    canonical: true,\n    recovered: true\n  });\n  const {\n    r,\n    s\n  } = _secp256k.Signature.fromHex(sigBytes);\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(r, _bn.BN_BE_256_OPTS), (0, _util.bnToU8a)(s, _bn.BN_BE_256_OPTS), new Uint8Array([recoveryParam || 0]));\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"c86b4d9406aab92876f63a90d5200c1a"}