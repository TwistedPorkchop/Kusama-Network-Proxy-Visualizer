{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":26}},{"name":"@polkadot/wasm-crypto","loc":{"line":4,"column":37}},{"name":"./bip39.js","loc":{"line":5,"column":35}},{"name":"./validate.js","loc":{"line":6,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mnemonicToLegacySeed = mnemonicToLegacySeed;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _bip = require(\"./bip39.js\");\n\nvar _validate = require(\"./validate.js\");\n\n/**\n * @name mnemonicToLegacySeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a\n * }\n * ```\n */\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction mnemonicToLegacySeed(mnemonic, password = '', onlyJs, byteLength = 32) {\n  if (!(0, _validate.mnemonicValidate)(mnemonic)) {\n    throw new Error('Invalid bip39 mnemonic specified');\n  } else if (![32, 64].includes(byteLength)) {\n    throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);\n  }\n\n  return byteLength === 32 ? !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39ToSeed)(mnemonic, password) : (0, _bip.mnemonicToSeedSync)(mnemonic, password).subarray(0, 32) : (0, _bip.mnemonicToSeedSync)(mnemonic, password);\n}"},"hash":"cf6cd883eb6dfac4853dab811f19e4db"}