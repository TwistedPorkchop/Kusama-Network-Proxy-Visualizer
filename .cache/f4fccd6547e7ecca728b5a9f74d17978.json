{"dependencies":[{"name":"@scure/base","loc":{"line":3,"column":23}},{"name":"../base32/helpers.js","loc":{"line":4,"column":69}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBase58 = exports.base58Encode = exports.base58Decode = exports.base58Validate = undefined;\n\nvar _base = require(\"@scure/base\");\n\nvar _helpers = require(\"../base32/helpers.js\");\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst config = {\n  chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',\n  coder: _base.base58,\n  ipfs: 'z',\n  type: 'base58'\n};\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates that the supplied value is valid base58, throwing exceptions if not\n */\n\nconst base58Validate = exports.base58Validate = (0, _helpers.createValidate)(config);\n/**\n * @name base58Decode\n * @summary Decodes a base58 value.\n * @description\n * From the provided input, decode the base58 and return the result as an `Uint8Array`.\n */\n\nconst base58Decode = exports.base58Decode = (0, _helpers.createDecode)(config, base58Validate);\n/**\n* @name base58Encode\n* @summary Creates a base58 value.\n* @description\n* From the provided input, create the base58 and return the result as a string.\n*/\n\nconst base58Encode = exports.base58Encode = (0, _helpers.createEncode)(config);\n/**\n* @name isBase58\n* @description Checks if the input is in base58, returning true/false\n*/\n\nconst isBase58 = exports.isBase58 = (0, _helpers.createIs)(base58Validate);"},"hash":"46166bf9b5d56fb3541ef9e6bb1dda3a"}