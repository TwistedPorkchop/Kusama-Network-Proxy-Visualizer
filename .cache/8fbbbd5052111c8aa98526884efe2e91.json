{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst CC_TO_UP = exports.CC_TO_UP = new Array(256);\nconst CC_TO_LO = exports.CC_TO_LO = new Array(256);\n\nfor (let i = 0; i < CC_TO_UP.length; i++) {\n  CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();\n  CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();\n}\n/** @internal */\n\nfunction formatAllCaps(w) {\n  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];\n}\n/**\n * @internal\n *\n * Inspired by https://stackoverflow.com/a/2970667\n *\n * This is not as optimal as the original SO answer (we split into per-word),\n * however it does pass the tests (which the SO version doesn't) and is still\n * a major improvement over the original camelcase npm package -\n *\n *   camelcase: 20.88 μs/op\n *        this:  1.00 μs/op\n *\n * Caveat of this: only Ascii, but acceptable for the intended usecase\n */\n\nfunction converter(format) {\n  return value => {\n    const parts = value // replace all seperators (including consequtive) with spaces\n    .replace(/[-_., ]+/g, ' ') // we don't want leading or trailing spaces\n    .trim() // split into words\n    .split(' ');\n    const count = parts.length;\n    let result = '';\n\n    for (let i = 0; i < count; i++) {\n      const w = parts[i]; // apply the formatting\n\n      result += format(/^[\\dA-Z]+$/.test(w) // all full uppercase + letters are changed to lowercase\n      ? w.toLowerCase() // all consecutive capitals + letters are changed to lowercase\n      // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder\n      : w.replace(/^[\\dA-Z]{2,}[^a-z]/, formatAllCaps), i);\n    }\n\n    return result;\n  };\n}\n/**\n * @name stringCamelCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase\n */\n\nconst stringCamelCase = exports.stringCamelCase = converter((w, i) => // lowercase for first letter/first word, else uppercase first, rest unchanged\n(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));\n/**\n * @name stringPascalCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase\n */\n\nconst stringPascalCase = exports.stringPascalCase = converter(w => // uppercase the first character, leave the rest unchanged\nCC_TO_UP[w.charCodeAt(0)] + w.slice(1));"},"hash":"c20741bae77207cd9d9f1da8cf6c30be"}