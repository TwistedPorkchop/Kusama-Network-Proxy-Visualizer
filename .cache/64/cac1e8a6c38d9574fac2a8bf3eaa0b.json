{"id":"node_modules/@polkadot/util-crypto/address/check.js","dependencies":[{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\package.json","includedInParent":true,"mtime":1657570398707},{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\package.json","includedInParent":true,"mtime":1657539547586},{"name":"../base58/index.js","loc":{"line":3,"column":29,"index":136},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\address\\check.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\base58\\index.js"},{"name":"./checksum.js","loc":{"line":4,"column":37,"index":195},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\address\\check.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\address\\checksum.js"},{"name":"./defaults.js","loc":{"line":5,"column":25,"index":237},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\address\\check.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\util-crypto\\address\\defaults.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkAddress = checkAddress;\n\nvar _index = require(\"../base58/index.js\");\n\nvar _checksum = require(\"./checksum.js\");\n\nvar _defaults = require(\"./defaults.js\");\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * @name checkAddress\n * @summary Validates an ss58 address.\n * @description\n * From the provided input, validate that the address is a valid input.\n */\nfunction checkAddress(address, prefix) {\n  var decoded;\n\n  try {\n    decoded = (0, _index.base58Decode)(address);\n  } catch (error) {\n    return [false, error.message];\n  }\n\n  var _checkAddressChecksum = (0, _checksum.checkAddressChecksum)(decoded),\n      _checkAddressChecksum2 = _slicedToArray(_checkAddressChecksum, 4),\n      isValid = _checkAddressChecksum2[0],\n      ss58Decoded = _checkAddressChecksum2[3];\n\n  if (ss58Decoded !== prefix) {\n    return [false, \"Prefix mismatch, expected \".concat(prefix, \", found \").concat(ss58Decoded)];\n  } else if (!_defaults.defaults.allowedEncodedLengths.includes(decoded.length)) {\n    return [false, 'Invalid decoded address length'];\n  }\n\n  return [isValid, isValid ? null : 'Invalid decoded address checksum'];\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":5,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":6,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":7,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":8,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":9,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":10,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":11,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":7}},{"generated":{"line":32,"column":9},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":16},"name":"checkAddress"},{"generated":{"line":32,"column":21},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":7}},{"generated":{"line":32,"column":22},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":29},"name":"address"},{"generated":{"line":32,"column":29},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":7}},{"generated":{"line":32,"column":31},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":38},"name":"prefix"},{"generated":{"line":32,"column":37},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":7}},{"generated":{"line":32,"column":39},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":13,"column":46}},{"generated":{"line":33,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":14,"column":2}},{"generated":{"line":33,"column":6},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":14,"column":6},"name":"decoded"},{"generated":{"line":33,"column":13},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":14,"column":2}},{"generated":{"line":35,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":16,"column":2}},{"generated":{"line":35,"column":6},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":16,"column":6}},{"generated":{"line":36,"column":4},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":4},"name":"decoded"},{"generated":{"line":36,"column":11},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":11}},{"generated":{"line":36,"column":14},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":14}},{"generated":{"line":36,"column":18},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":14},"name":"base58Decode"},{"generated":{"line":36,"column":37},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":14}},{"generated":{"line":36,"column":39},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":27},"name":"address"},{"generated":{"line":36,"column":46},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":14}},{"generated":{"line":36,"column":47},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":17,"column":4}},{"generated":{"line":37,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":18,"column":3}},{"generated":{"line":37,"column":3},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":16,"column":2}},{"generated":{"line":37,"column":4},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":18,"column":4}},{"generated":{"line":37,"column":11},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":18,"column":11},"name":"error"},{"generated":{"line":37,"column":16},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":18,"column":4}},{"generated":{"line":37,"column":18},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":18,"column":18}},{"generated":{"line":38,"column":4},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":4}},{"generated":{"line":38,"column":11},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":11}},{"generated":{"line":38,"column":12},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":12}},{"generated":{"line":38,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":11}},{"generated":{"line":38,"column":19},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":19},"name":"error"},{"generated":{"line":38,"column":24},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":24}},{"generated":{"line":38,"column":25},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":25},"name":"message"},{"generated":{"line":38,"column":32},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":11}},{"generated":{"line":38,"column":33},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":19,"column":4}},{"generated":{"line":39,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":20,"column":3}},{"generated":{"line":41,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":41,"column":30},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":35}},{"generated":{"line":41,"column":34},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":35},"name":"checkAddressChecksum"},{"generated":{"line":41,"column":64},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":35}},{"generated":{"line":41,"column":66},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":56},"name":"decoded"},{"generated":{"line":41,"column":73},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":35}},{"generated":{"line":41,"column":74},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":42,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":43,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":43,"column":6},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":9},"name":"isValid"},{"generated":{"line":43,"column":13},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":44,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":44,"column":6},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":20},"name":"ss58Decoded"},{"generated":{"line":44,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":22,"column":2}},{"generated":{"line":46,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":2}},{"generated":{"line":46,"column":6},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":6},"name":"ss58Decoded"},{"generated":{"line":46,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":17}},{"generated":{"line":46,"column":22},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":22},"name":"prefix"},{"generated":{"line":46,"column":28},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":2}},{"generated":{"line":46,"column":30},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":30}},{"generated":{"line":47,"column":4},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":4}},{"generated":{"line":47,"column":11},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":11}},{"generated":{"line":47,"column":12},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":12}},{"generated":{"line":47,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":11}},{"generated":{"line":47,"column":55},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":48},"name":"prefix"},{"generated":{"line":47,"column":61},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":11}},{"generated":{"line":47,"column":82},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":65},"name":"ss58Decoded"},{"generated":{"line":47,"column":93},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":11}},{"generated":{"line":47,"column":95},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":25,"column":4}},{"generated":{"line":48,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":3}},{"generated":{"line":48,"column":3},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":24,"column":2}},{"generated":{"line":48,"column":9},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":9}},{"generated":{"line":48,"column":13},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":13}},{"generated":{"line":48,"column":14},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":14},"name":"defaults"},{"generated":{"line":48,"column":32},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":14}},{"generated":{"line":48,"column":33},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":23},"name":"allowedEncodedLengths"},{"generated":{"line":48,"column":54},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":14}},{"generated":{"line":48,"column":55},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":45},"name":"includes"},{"generated":{"line":48,"column":63},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":14}},{"generated":{"line":48,"column":64},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":54},"name":"decoded"},{"generated":{"line":48,"column":71},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":61}},{"generated":{"line":48,"column":72},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":62},"name":"length"},{"generated":{"line":48,"column":78},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":14}},{"generated":{"line":48,"column":79},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":9}},{"generated":{"line":48,"column":81},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":26,"column":71}},{"generated":{"line":49,"column":4},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":4}},{"generated":{"line":49,"column":11},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":11}},{"generated":{"line":49,"column":12},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":12}},{"generated":{"line":49,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":11}},{"generated":{"line":49,"column":19},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":19}},{"generated":{"line":49,"column":51},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":11}},{"generated":{"line":49,"column":52},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":27,"column":4}},{"generated":{"line":50,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":28,"column":3}},{"generated":{"line":52,"column":2},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":2}},{"generated":{"line":52,"column":9},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":9}},{"generated":{"line":52,"column":10},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":10},"name":"isValid"},{"generated":{"line":52,"column":17},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":9}},{"generated":{"line":52,"column":19},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":19},"name":"isValid"},{"generated":{"line":52,"column":26},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":26}},{"generated":{"line":52,"column":29},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":29}},{"generated":{"line":52,"column":33},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":26}},{"generated":{"line":52,"column":36},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":36}},{"generated":{"line":52,"column":70},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":9}},{"generated":{"line":52,"column":71},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":30,"column":2}},{"generated":{"line":53,"column":0},"source":"node_modules/@polkadot/util-crypto/address/check.js","original":{"line":31,"column":1}}],"sources":{"node_modules/@polkadot/util-crypto/address/check.js":"// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { base58Decode } from \"../base58/index.js\";\nimport { checkAddressChecksum } from \"./checksum.js\";\nimport { defaults } from \"./defaults.js\";\n/**\n * @name checkAddress\n * @summary Validates an ss58 address.\n * @description\n * From the provided input, validate that the address is a valid input.\n */\n\nexport function checkAddress(address, prefix) {\n  let decoded;\n\n  try {\n    decoded = base58Decode(address);\n  } catch (error) {\n    return [false, error.message];\n  }\n\n  const [isValid,,, ss58Decoded] = checkAddressChecksum(decoded);\n\n  if (ss58Decoded !== prefix) {\n    return [false, `Prefix mismatch, expected ${prefix}, found ${ss58Decoded}`];\n  } else if (!defaults.allowedEncodedLengths.includes(decoded.length)) {\n    return [false, 'Invalid decoded address length'];\n  }\n\n  return [isValid, isValid ? null : 'Invalid decoded address checksum'];\n}"},"lineCount":null}},"error":null,"hash":"2701d3b17becb9b9d8501dce49ec601b","cacheData":{"env":{}}}