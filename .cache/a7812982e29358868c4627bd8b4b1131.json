{"dependencies":[{"name":"@substrate/ss58-registry","loc":{"line":3,"column":27}},{"name":"./defaults/index.js","loc":{"line":4,"column":67}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectableNetworks = exports.availableNetworks = exports.allNetworks = undefined;\n\nvar _ss58Registry = require(\"@substrate/ss58-registry\");\n\nvar _ss58Registry2 = _interopRequireDefault(_ss58Registry);\n\nvar _index = require(\"./defaults/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// These are known prefixes that are not sorted\n\n// Copyright 2017-2022 @polkadot/networks authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst UNSORTED = [0, 2, 42];\nconst TESTNETS = ['testnet'];\n\nfunction toExpanded(o) {\n  const network = o.network || '';\n  const nameParts = network.replace(/_/g, '-').split('-');\n  const n = o; // ledger additions\n\n  n.slip44 = _index.knownLedger[network];\n  n.hasLedgerSupport = !!n.slip44; // general items\n\n  n.genesisHash = _index.knownGenesis[network] || [];\n  n.icon = _index.knownIcon[network] || 'substrate'; // filtering\n\n  n.isTestnet = !!_index.knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);\n  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;\n  return n;\n}\n\nfunction filterSelectable({\n  genesisHash,\n  prefix\n}) {\n  return !!genesisHash.length || prefix === 42;\n}\n\nfunction filterAvailable(n) {\n  return !n.isIgnored && !!n.network;\n}\n\nfunction sortNetworks(a, b) {\n  const isUnSortedA = UNSORTED.includes(a.prefix);\n  const isUnSortedB = UNSORTED.includes(b.prefix);\n  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;\n} // This is all the Substrate networks with our additional information\n\n\nconst allNetworks = exports.allNetworks = _ss58Registry2.default.map(toExpanded); // The list of available/claimed prefixes\n//   - no testnets\n//   - we only include those where we have a standardAccount\n//   - sort by name, however we keep 0, 2, 42 first in the list\n\nconst availableNetworks = exports.availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks); // A filtered list of those chains we have details about (genesisHashes)\n\nconst selectableNetworks = exports.selectableNetworks = availableNetworks.filter(filterSelectable);"},"hash":"e76bfa3e398bca8e08fc6cf94be9aaae"}