{"dependencies":[{"name":"@noble/secp256k1","loc":{"line":3,"column":29}},{"name":"@polkadot/util","loc":{"line":4,"column":36}},{"name":"@polkadot/wasm-crypto","loc":{"line":5,"column":43}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secp256k1PairFromSeed = secp256k1PairFromSeed;\n\nvar _secp256k = require(\"@noble/secp256k1\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n/**\n * @name secp256k1PairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nfunction secp256k1PairFromSeed(seed, onlyJs) {\n  if (seed.length !== 32) {\n    throw new Error('Expected valid 32-byte private key as a seed');\n  }\n\n  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {\n    const full = (0, _wasmCrypto.secp256k1FromSeed)(seed);\n    const publicKey = full.slice(32); // There is an issue with the secp256k1 when running in an ASM.js environment where\n    // it seems that the lazy static section yields invalid results on the _first_ run.\n    // If this happens, fail outright, we cannot allow invalid return values\n    // https://github.com/polkadot-js/wasm/issues/307\n\n    if ((0, _util.u8aEmpty)(publicKey)) {\n      throw new Error('Invalid publicKey generated from WASM interface');\n    }\n\n    return {\n      publicKey,\n      secretKey: full.slice(0, 32)\n    };\n  }\n\n  return {\n    publicKey: (0, _secp256k.getPublicKey)(seed, true),\n    secretKey: seed\n  };\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"1f3d6fc360f1de7c390973ac76571b5d"}