{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":36}},{"name":"@polkadot/wasm-crypto","loc":{"line":4,"column":30}},{"name":"../helpers.js","loc":{"line":5,"column":28}},{"name":"./xxhash64.js","loc":{"line":6,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.xxhashAsHex = undefined;\nexports.xxhashAsU8a = xxhashAsU8a;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _helpers = require(\"../helpers.js\");\n\nvar _xxhash = require(\"./xxhash64.js\");\n\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction xxhashAsU8a(data, bitLength = 64, onlyJs) {\n  const rounds = Math.ceil(bitLength / 64);\n  const u8a = (0, _util.u8aToU8a)(data);\n\n  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {\n    return (0, _wasmCrypto.twox)(u8a, rounds);\n  }\n\n  const result = new Uint8Array(rounds * 8);\n\n  for (let seed = 0; seed < rounds; seed++) {\n    result.set((0, _xxhash.xxhash64)(u8a, seed).reverse(), seed * 8);\n  }\n\n  return result;\n}\n/**\n * @name xxhashAsHex\n * @description Creates a xxhash64 hex from the input.\n */\n\nconst xxhashAsHex = exports.xxhashAsHex = (0, _helpers.createAsHex)(xxhashAsU8a);"},"hash":"dedbbf1f316a43ae0b4c338d134101da"}