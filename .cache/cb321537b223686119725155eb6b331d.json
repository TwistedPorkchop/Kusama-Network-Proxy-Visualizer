{"dependencies":[{"name":"@polkadot/x-global","loc":{"line":3,"column":24}},{"name":"./is/function.js","loc":{"line":4,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectPackage = detectPackage;\n\nvar _xGlobal = require(\"@polkadot/x-global\");\n\nvar _function = require(\"./is/function.js\");\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\\nThe following conflicting packages were found:';\n/** @internal */\n\nfunction getEntry(name) {\n  const _global = _xGlobal.xglobal;\n\n  if (!_global.__polkadotjs) {\n    _global.__polkadotjs = {};\n  }\n\n  if (!_global.__polkadotjs[name]) {\n    _global.__polkadotjs[name] = [];\n  }\n\n  return _global.__polkadotjs[name];\n}\n/** @internal */\n\nfunction formatDisplay(all, fmt) {\n  let max = 0;\n\n  for (let i = 0; i < all.length; i++) {\n    max = Math.max(max, all[i].version.length);\n  }\n\n  return all.map(d => `\\t${fmt(d.version.padEnd(max), d).join('\\t')}`).join('\\n');\n}\n/** @internal */\n\nfunction formatInfo(version, {\n  name\n}) {\n  return [version, name];\n}\n/** @internal */\n\nfunction formatVersion(version, {\n  path,\n  type\n}) {\n  let extracted;\n\n  if (path && path.length >= 5) {\n    const nmIndex = path.indexOf('node_modules');\n    extracted = nmIndex === -1 ? path : path.substring(nmIndex);\n  } else {\n    extracted = '<unknown>';\n  }\n\n  return [`${`${type || ''}`.padStart(3)} ${version}`, extracted];\n}\n/** @internal */\n\nfunction getPath(infoPath, pathOrFn) {\n  if (infoPath) {\n    return infoPath;\n  } else if ((0, _function.isFunction)(pathOrFn)) {\n    try {\n      return pathOrFn() || '';\n    } catch (error) {\n      return '';\n    }\n  }\n\n  return pathOrFn || '';\n}\n/** @internal */\n\nfunction warn(pre, all, fmt) {\n  console.warn(`${pre}\\n${DEDUPE}\\n${formatDisplay(all, fmt)}`);\n}\n/**\n * @name detectPackage\n * @summary Checks that a specific package is only imported once\n * @description A `@polkadot/*` version detection utility, checking for one occurence of a package in addition to checking for ddependency versions.\n */\n\nfunction detectPackage({\n  name,\n  path,\n  type,\n  version\n}, pathOrFn, deps = []) {\n  if (!name.startsWith('@polkadot')) {\n    throw new Error(`Invalid package descriptor ${name}`);\n  }\n\n  const entry = getEntry(name);\n  entry.push({\n    path: getPath(path, pathOrFn),\n    type,\n    version\n  });\n\n  if (entry.length !== 1) {\n    warn(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);\n  } else {\n    const mismatches = deps.filter(d => d && d.version !== version);\n\n    if (mismatches.length) {\n      warn(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);\n    }\n  }\n}"},"hash":"5c09cca418fbb684b1504e088addc41f"}