{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":69}},{"name":"../address/decode.js","loc":{"line":4,"column":30}},{"name":"../ed25519/verify.js","loc":{"line":5,"column":30}},{"name":"../secp256k1/verify.js","loc":{"line":6,"column":32}},{"name":"../sr25519/verify.js","loc":{"line":7,"column":30}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signatureVerify = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = require(\"../address/decode.js\");\n\nvar _verify = require(\"../ed25519/verify.js\");\n\nvar _verify2 = require(\"../secp256k1/verify.js\");\n\nvar _verify3 = require(\"../sr25519/verify.js\");\n\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey) => (0, _verify2.secp256k1Verify)(message, signature, publicKey, hashType); // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', _verify.ed25519Verify], ['sr25519', _verify3.sr25519Verify], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}) {\n  if (![0, 1, 2].includes(signature[0])) {\n    throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  }\n\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, VERIFIERS_ECDSA).isValid,\n      ed25519: () => (0, _verify.ed25519Verify)(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify3.sr25519Verify)(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction getVerifyFn(signature) {\n  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n\n  if (![64, 65, 66].includes(signatureU8a.length)) {\n    throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  }\n\n  const publicKey = (0, _decode.decodeAddress)(addressOrPublicKey);\n  const input = {\n    message: (0, _util.u8aToU8a)(message),\n    publicKey,\n    signature: signatureU8a\n  };\n  const result = {\n    crypto: 'none',\n    isValid: false,\n    isWrapped: (0, _util.u8aIsWrapped)(input.message, true),\n    publicKey\n  };\n  const isWrappedBytes = (0, _util.u8aIsWrapped)(input.message, false);\n  const verifyFn = getVerifyFn(signatureU8a);\n  verifyFn(result, input);\n\n  if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {\n    return result;\n  }\n\n  input.message = isWrappedBytes ? (0, _util.u8aUnwrapBytes)(input.message) : (0, _util.u8aWrapBytes)(input.message);\n  return verifyFn(result, input);\n}"},"hash":"146765aef2cc77e354f6b4dd88908a83"}