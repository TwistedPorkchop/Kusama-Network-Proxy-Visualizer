{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// Copyright 2017-2022 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst recordIdentity = record => record;\n\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(({\n    event\n  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));\n}\n\nfunction getDispatchError({\n  event: {\n    data: [dispatchError]\n  }\n}) {\n  return dispatchError;\n}\n\nfunction getDispatchInfo({\n  event: {\n    data,\n    method\n  }\n}) {\n  return method === 'ExtrinsicSuccess' ? data[0] : data[1];\n}\n\nfunction extractError(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];\n}\n\nfunction extractInfo(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];\n}\n\nclass SubmittableResult {\n  constructor({\n    dispatchError,\n    dispatchInfo,\n    events,\n    internalError,\n    status,\n    txHash,\n    txIndex\n  }) {\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.internalError = internalError;\n    this.status = status;\n    this.txHash = txHash;\n    this.txIndex = txIndex;\n  }\n\n  get isCompleted() {\n    return this.isError || this.status.isInBlock || this.status.isFinalized;\n  }\n\n  get isError() {\n    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n  }\n\n  get isFinalized() {\n    return this.status.isFinalized;\n  }\n\n  get isInBlock() {\n    return this.status.isInBlock;\n  }\n\n  get isWarning() {\n    return this.status.isRetracted;\n  }\n  /**\n   * @description Filters EventRecords for the specified method & section (there could be multiple)\n   */\n\n  filterRecords(section, method) {\n    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n  }\n  /**\n   * @description Finds an EventRecord for the specified method & section\n   */\n\n  findRecord(section, method) {\n    return this.filterRecords(section, method)[0];\n  }\n  /**\n   * @description Creates a human representation of the output\n   */\n\n  toHuman(isExtended) {\n    var _this$dispatchError, _this$dispatchInfo, _this$internalError;\n\n    return {\n      dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),\n      dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),\n      events: this.events.map(e => e.toHuman(isExtended)),\n      internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),\n      status: this.status.toHuman(isExtended)\n    };\n  }\n\n}\nexports.SubmittableResult = SubmittableResult;"},"hash":"3cf284aa9c5c244bc42a29418f0f00d3"}