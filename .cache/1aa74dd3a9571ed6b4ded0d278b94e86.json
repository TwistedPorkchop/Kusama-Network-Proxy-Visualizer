{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":50}},{"name":"../nacl/index.js","loc":{"line":4,"column":28}},{"name":"../scrypt/index.js","loc":{"line":5,"column":44}},{"name":"./constants.js","loc":{"line":6,"column":54}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.jsonDecryptData = jsonDecryptData;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _index = require(\"../nacl/index.js\");\n\nvar _index2 = require(\"../scrypt/index.js\");\n\nvar _constants = require(\"./constants.js\");\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction jsonDecryptData(encrypted, passphrase, encType = _constants.ENCODING) {\n  (0, _util.assert)(encrypted, 'No encrypted data available to decode');\n  (0, _util.assert)(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encrypted data');\n  let encoded = encrypted;\n\n  if (passphrase) {\n    let password;\n\n    if (encType.includes('scrypt')) {\n      const {\n        params,\n        salt\n      } = (0, _index2.scryptFromU8a)(encrypted);\n      password = (0, _index2.scryptEncode)(passphrase, salt, params).password;\n      encrypted = encrypted.subarray(_constants.SCRYPT_LENGTH);\n    } else {\n      password = (0, _util.stringToU8a)(passphrase);\n    }\n\n    encoded = (0, _index.naclDecrypt)(encrypted.subarray(_constants.NONCE_LENGTH), encrypted.subarray(0, _constants.NONCE_LENGTH), (0, _util.u8aFixLength)(password, 256, true));\n  }\n\n  (0, _util.assert)(encoded, 'Unable to decode using the supplied passphrase');\n  return encoded;\n}"},"hash":"8a7e817c8dcb4874f4e9168513e0ffb9"}