{"dependencies":[{"name":"tweetnacl","loc":{"line":3,"column":17}},{"name":"@polkadot/util","loc":{"line":4,"column":33}},{"name":"@polkadot/wasm-crypto","loc":{"line":5,"column":49}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ed25519Sign = ed25519Sign;\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name ed25519Sign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Sign } from '@polkadot/util-crypto';\n *\n * ed25519Sign([...], [...]); // => [...]\n * ```\n */\n\nfunction ed25519Sign(message, {\n  publicKey,\n  secretKey\n}, onlyJs) {\n  (0, _util.assert)(secretKey, 'Expected a valid secretKey');\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  return !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Sign)(publicKey, secretKey.subarray(0, 32), messageU8a) : _tweetnacl2.default.sign.detached(messageU8a, secretKey);\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"e50ac55940a4e783e15139be2dfea1c1"}