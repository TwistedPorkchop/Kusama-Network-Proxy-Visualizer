{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promisify = promisify;\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name promisify\n * @summary Wraps an async callback into a `Promise`\n * @description\n * Wraps the supplied async function `fn` that has a standard JS callback `(error: Error, result: any)` into a `Promise`, passing the supplied parameters. When `error` is set, the Promise is rejected, else the Promise resolves with the `result` value.\n * @example\n * <BR>\n *\n * ```javascript\n * const { promisify } from '@polkadot/util';\n *\n * await promisify(null, ((a, cb) => cb(null, a), true); // resolves with `true`\n * await promisify(null, (cb) => cb(new Error('error!'))); // rejects with `error!`\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction promisify(self, fn, ...params) {\n  return new Promise((resolve, reject) => {\n    fn.apply(self, params.concat((error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }));\n  });\n}"},"hash":"97129fb27a5f6980052bc64653d0ffa3"}