{"dependencies":[{"name":"../is/number.js","loc":{"line":3,"column":25}},{"name":"./toBn.js","loc":{"line":4,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bnToU8a = undefined;\n\nvar _number = require(\"../is/number.js\");\n\nvar _toBn = require(\"./toBn.js\");\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_OPTS = {\n  bitLength: -1,\n  isLe: true,\n  isNegative: false\n};\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@polkadot/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\n\n/** @deprecated Use bnToU8a(value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */\nfunction bnToU8a(value, arg1 = DEFAULT_OPTS, arg2 = true) {\n  const {\n    bitLength = -1,\n    isLe = true,\n    isNegative = false\n  } = (0, _number.isNumber)(arg1) ? {\n    bitLength: arg1,\n    isLe: arg2\n  } : arg1;\n  const valueBn = (0, _toBn.bnToBn)(value);\n  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);\n\n  if (!value) {\n    return bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);\n  }\n\n  const output = new Uint8Array(byteLength);\n  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;\n  output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);\n  return output;\n}\n\nexports.bnToU8a = bnToU8a;"},"hash":"1c33c4c693b8ce8b9dde339ada0d6b4a"}