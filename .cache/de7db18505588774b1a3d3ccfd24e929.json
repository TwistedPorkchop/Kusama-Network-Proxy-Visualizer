{"dependencies":[{"name":"@noble/secp256k1","loc":{"line":3,"column":44}},{"name":"@polkadot/util","loc":{"line":4,"column":36}},{"name":"@polkadot/wasm-crypto","loc":{"line":5,"column":50}},{"name":"./compress.js","loc":{"line":6,"column":34}},{"name":"./expand.js","loc":{"line":7,"column":32}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secp256k1Recover = secp256k1Recover;\n\nvar _secp256k = require(\"@noble/secp256k1\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _compress = require(\"./compress.js\");\n\nvar _expand = require(\"./expand.js\");\n\n/**\n * @name secp256k1Recover\n * @description Recovers a publicKey from the supplied signature\n */\n\nfunction secp256k1Recover(msgHash, signature, recovery, hashType = 'blake2', onlyJs) {\n  const sig = (0, _util.u8aToU8a)(signature).subarray(0, 64);\n  const msg = (0, _util.u8aToU8a)(msgHash);\n  const publicKey = !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.secp256k1Recover)(msg, sig, recovery) : (0, _secp256k.recoverPublicKey)(msg, _secp256k.Signature.fromCompact(sig).toRawBytes(), recovery);\n\n  if (!publicKey) {\n    throw new Error('Unable to recover publicKey from signature');\n  }\n\n  return hashType === 'keccak' ? (0, _expand.secp256k1Expand)(publicKey, onlyJs) : (0, _compress.secp256k1Compress)(publicKey, onlyJs);\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"4c4138aa4ae7f16e9413e2d25950328f"}