{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":28}},{"name":"../../blake2/asU8a.js","loc":{"line":4,"column":28}},{"name":"./fromSeed.js","loc":{"line":5,"column":36}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ed25519PairFromString = ed25519PairFromString;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _asU8a = require(\"../../blake2/asU8a.js\");\n\nvar _fromSeed = require(\"./fromSeed.js\");\n\n/**\n * @name ed25519PairFromString\n * @summary Creates a new public/secret keypair from a string.\n * @description\n * Returns a object containing a `publicKey` & `secretKey` generated from the supplied string. The string is hashed and the value used as the input seed.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519PairFromString } from '@polkadot/util-crypto';\n *\n * ed25519PairFromString('test'); // => { secretKey: [...], publicKey: [...] }\n * ```\n */\n\nfunction ed25519PairFromString(value) {\n  return (0, _fromSeed.ed25519PairFromSeed)((0, _asU8a.blake2AsU8a)((0, _util.stringToU8a)(value)));\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"d4f4ba38452d0e7b5bc0d811c38288b9"}