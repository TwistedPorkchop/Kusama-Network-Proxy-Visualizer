{"dependencies":[{"name":"@scure/base","loc":{"line":3,"column":22}},{"name":"./helpers.js","loc":{"line":4,"column":69}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base32Encode = exports.base32Decode = exports.isBase32 = exports.base32Validate = undefined;\n\nvar _base = require(\"@scure/base\");\n\nvar _helpers = require(\"./helpers.js\");\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst chars = 'abcdefghijklmnopqrstuvwxyz234567';\nconst config = {\n  chars,\n  coder: _base.utils.chain( // We define our own chain, the default base32 has padding\n  _base.utils.radix2(5), _base.utils.alphabet(chars), {\n    decode: input => input.split(''),\n    encode: input => input.join('')\n  }),\n  ipfs: 'b',\n  type: 'base32'\n};\n/**\n * @name base32Validate\n * @summary Validates a base32 value.\n * @description\n * Validates that the supplied value is valid base32, throwing exceptions if not\n */\n\nconst base32Validate = exports.base32Validate = (0, _helpers.createValidate)(config);\n/**\n* @name isBase32\n* @description Checks if the input is in base32, returning true/false\n*/\n\nconst isBase32 = exports.isBase32 = (0, _helpers.createIs)(base32Validate);\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\nconst base32Decode = exports.base32Decode = (0, _helpers.createDecode)(config, base32Validate);\n/**\n* @name base32Encode\n* @summary Creates a base32 value.\n* @description\n* From the provided input, create the base32 and return the result as a string.\n*/\n\nconst base32Encode = exports.base32Encode = (0, _helpers.createEncode)(config);"},"hash":"ca854a6b5361adf67d0af580216dd9ac"}