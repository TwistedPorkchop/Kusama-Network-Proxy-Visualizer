{"dependencies":[{"name":"../bn/bn.js","loc":{"line":3,"column":19}},{"name":"../is/boolean.js","loc":{"line":4,"column":26}},{"name":"./stripPrefix.js","loc":{"line":5,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToBn = undefined;\n\nvar _bn = require(\"../bn/bn.js\");\n\nvar _boolean = require(\"../is/boolean.js\");\n\nvar _stripPrefix = require(\"./stripPrefix.js\");\n\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@polkadot/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\n\n/** @deprecated Use hexToBn (value?: string | null, options?: ToBnOptions) */\nfunction hexToBn(value, options = {}) {\n  if (!value || value === '0x') {\n    return new _bn.BN(0);\n  } // For hex, default to BE\n\n\n  const {\n    isLe = false,\n    isNegative = false\n  } = (0, _boolean.isBoolean)(options) ? {\n    isLe: options\n  } : options;\n  const stripped = (0, _stripPrefix.hexStripPrefix)(value);\n  const bn = new _bn.BN(stripped, 16, isLe ? 'le' : 'be'); // fromTwos takes as parameter the number of bits, which is the hex length\n  // multiplied by 4 (2 bytes being 8 bits)\n\n  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;\n} // Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexports.hexToBn = hexToBn;"},"hash":"e4d2f89f92743678fec20492c418ecf2"}