{"dependencies":[{"name":"../is/number.js","loc":{"line":3,"column":25}},{"name":"../object/spread.js","loc":{"line":4,"column":29}},{"name":"../u8a/index.js","loc":{"line":5,"column":25}},{"name":"./toU8a.js","loc":{"line":6,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bnToHex = undefined;\n\nvar _number = require(\"../is/number.js\");\n\nvar _spread = require(\"../object/spread.js\");\n\nvar _index = require(\"../u8a/index.js\");\n\nvar _toU8a = require(\"./toU8a.js\");\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ZERO_STR = '0x00';\nconst DEFAULT_OPTS = {\n  bitLength: -1,\n  isLe: false,\n  isNegative: false\n};\n/**\n * @name bnToHex\n * @summary Creates a hex value from a BN.js bignumber object.\n * @description\n * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToHex } from '@polkadot/util';\n *\n * bnToHex(new BN(0x123456)); // => '0x123456'\n * ```\n */\n\n/** @deprecated Use bnToHex (value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */\nfunction bnToHex(value, arg1 = DEFAULT_OPTS, arg2 = false) {\n  return !value ? ZERO_STR : (0, _index.u8aToHex)((0, _toU8a.bnToU8a)(value, (0, _spread.objectSpread)( // We spread here, the default for hex values is BE (JSONRPC via substrate)\n  {\n    isLe: false,\n    isNegative: false\n  }, (0, _number.isNumber)(arg1) ? {\n    bitLength: arg1,\n    isLe: arg2\n  } : arg1)));\n}\n\nexports.bnToHex = bnToHex;"},"hash":"a7d4a803ec1b4731d04e78f25e73e8b5"}