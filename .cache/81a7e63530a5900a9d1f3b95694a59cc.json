{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":72}},{"name":"@polkadot/x-bigint","loc":{"line":4,"column":23}},{"name":"../bn.js","loc":{"line":5,"column":43}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secp256k1PrivateKeyTweakAdd = secp256k1PrivateKeyTweakAdd;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _xBigint = require(\"@polkadot/x-bigint\");\n\nvar _bn = require(\"../bn.js\");\n\n// pre-defined curve param as lifted form elliptic\n// https://github.com/indutny/elliptic/blob/e71b2d9359c5fe9437fbf46f1f05096de447de57/lib/elliptic/curves.js#L182\n\nconst N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, ''); // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst N_BI = (0, _xBigint.BigInt)(`0x${N}`);\nconst N_BN = new _util.BN(N, 'hex');\n\nfunction addBi(seckey, tweak) {\n  let res = (0, _util.u8aToBigInt)(tweak, _bn.BN_BE_OPTS);\n\n  if (res >= N_BI) {\n    throw new Error('Tweak parameter is out of range');\n  }\n\n  res += (0, _util.u8aToBigInt)(seckey, _bn.BN_BE_OPTS);\n\n  if (res >= N_BI) {\n    res -= N_BI;\n  }\n\n  if (res === _util._0n) {\n    throw new Error('Invalid resulting private key');\n  }\n\n  return (0, _util.nToU8a)(res, _bn.BN_BE_256_OPTS);\n}\n\nfunction addBn(seckey, tweak) {\n  const res = new _util.BN(tweak);\n\n  if (res.cmp(N_BN) >= 0) {\n    throw new Error('Tweak parameter is out of range');\n  }\n\n  res.iadd(new _util.BN(seckey));\n\n  if (res.cmp(N_BN) >= 0) {\n    res.isub(N_BN);\n  }\n\n  if (res.isZero()) {\n    throw new Error('Invalid resulting private key');\n  }\n\n  return (0, _util.bnToU8a)(res, _bn.BN_BE_256_OPTS);\n}\n\nfunction secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {\n  if (!(0, _util.isU8a)(seckey) || seckey.length !== 32) {\n    throw new Error('Expected seckey to be an Uint8Array with length 32');\n  } else if (!(0, _util.isU8a)(tweak) || tweak.length !== 32) {\n    throw new Error('Expected tweak to be an Uint8Array with length 32');\n  }\n\n  return !_util.hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);\n}"},"hash":"d7566d4127c9515086b398d1ead73eee"}