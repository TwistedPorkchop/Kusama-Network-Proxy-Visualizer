{"dependencies":[{"name":"./is/function.js","loc":{"line":3,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = assert;\nexports.assertReturn = assertReturn;\nexports.assertUnreachable = assertUnreachable;\n\nvar _function = require(\"./is/function.js\");\n\n/**\n * @name assert\n * @summary Checks for a valid test, if not Error is thrown.\n * @description\n * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.\n * @example\n * <BR>\n *\n * ```javascript\n * const { assert } from '@polkadot/util';\n *\n * assert(true, 'True should be true'); // passes\n * assert(false, 'False should not be true'); // Error thrown\n * assert(false, () => 'message'); // Error with 'message'\n * ```\n */\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error((0, _function.isFunction)(message) ? message() : message);\n  }\n}\n/**\n * @name assertReturn\n * @description Returns when the value is not undefined/null, otherwise throws assertion error\n */\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction assertReturn(value, message) {\n  assert(value !== undefined && value !== null, message);\n  return value;\n}\n/**\n * @name assertUnreachable\n * @description An assertion helper that ensures all codepaths are followed\n */\n\nfunction assertUnreachable(x) {\n  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);\n}"},"hash":"f88a51b23fe3f91d0b7c578da8df02c8"}