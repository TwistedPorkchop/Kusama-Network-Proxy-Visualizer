{"dependencies":[{"name":"tweetnacl","loc":{"line":3,"column":17}},{"name":"@polkadot/util","loc":{"line":4,"column":33}},{"name":"@polkadot/wasm-crypto","loc":{"line":5,"column":53}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ed25519Verify = ed25519Verify;\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name ed25519Sign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Verify } from '@polkadot/util-crypto';\n *\n * ed25519Verify([...], [...], [...]); // => true/false\n * ```\n */\n\nfunction ed25519Verify(message, signature, publicKey, onlyJs) {\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  (0, _util.assert)(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Verify)(signatureU8a, messageU8a, publicKeyU8a) : _tweetnacl2.default.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"beb175ade1a64b51f044259d7271a45f"}