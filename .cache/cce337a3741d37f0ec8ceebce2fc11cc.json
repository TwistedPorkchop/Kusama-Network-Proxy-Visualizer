{"dependencies":[{"name":"../bn/toBn.js","loc":{"line":3,"column":23}},{"name":"../is/boolean.js","loc":{"line":4,"column":26}},{"name":"./formatDecimal.js","loc":{"line":5,"column":30}},{"name":"./si.js","loc":{"line":6,"column":43}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatBalance = undefined;\n\nvar _toBn = require(\"../bn/toBn.js\");\n\nvar _boolean = require(\"../is/boolean.js\");\n\nvar _formatDecimal = require(\"./formatDecimal.js\");\n\nvar _si = require(\"./si.js\");\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = _si.SI[_si.SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\n\nfunction getUnits(si, withSi, withSiFull, withUnit) {\n  const unit = (0, _boolean.isBoolean)(withUnit) ? _si.SI[_si.SI_MID].text : withUnit;\n  return withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${unit}` : '' : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}` : '';\n}\n\nfunction getPrePost(text, decimals, forceUnit) {\n  // NOTE We start at midpoint (8) minus 1 - this means that values display as\n  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil\n  // so there are at most 3 decimal before the decimal separator\n  const si = (0, _si.calcSi)(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const prefix = text.substring(0, mid);\n  const padding = mid < 0 ? 0 - mid : 0;\n  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substring(mid < 0 ? 0 : mid)}0000`.substring(0, 4);\n  return [si, prefix || '0', postfix];\n} // Formats a string/number with <prefix>.<postfix><type> notation\n\n\nfunction _formatBalance(input, options = true, optDecimals = defaultDecimals) {\n  let text = (0, _toBn.bnToBn)(input).toString();\n\n  if (text.length === 0 || text === '0') {\n    return '0';\n  } // extract options - the boolean case is for backwards-compat\n\n\n  const {\n    decimals = optDecimals,\n    forceUnit = undefined,\n    withSi = true,\n    withSiFull = false,\n    withUnit = true\n  } = (0, _boolean.isBoolean)(options) ? {\n    withSi: options\n  } : options; // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n\n  let sign = '';\n\n  if (text[0].startsWith('-')) {\n    sign = '-';\n    text = text.substring(1);\n  }\n\n  const [si, prefix, postfix] = getPrePost(text, decimals, forceUnit);\n  const units = getUnits(si, withSi, withSiFull, withUnit);\n  return `${sign}${(0, _formatDecimal.formatDecimal)(prefix)}.${postfix}${units}`;\n}\n\nconst formatBalance = exports.formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.calcSi = (text, decimals = defaultDecimals) => (0, _si.calcSi)(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.findSi = _si.findSi; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n}; // get allowable options to display in a dropdown\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n  return _si.SI.filter(({\n    power\n  }) => power < 0 ? decimals + power >= 0 : true);\n}; // Sets the default decimals to use for formatting (ui-wide)\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.setDefaults = ({\n  decimals,\n  unit\n}) => {\n  defaultDecimals = decimals === undefined ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;\n  defaultUnit = unit === undefined ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;\n  _si.SI[_si.SI_MID].text = defaultUnit;\n};"},"hash":"a274c239c18fc876972591289710c976"}