{"id":"node_modules/@polkadot/types-codec/base/Int.js","dependencies":[{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\package.json","includedInParent":true,"mtime":1657538422482},{"name":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\package.json","includedInParent":true,"mtime":1657539547205},{"name":"../abstract/Int.js","loc":{"line":3,"column":28,"index":135},"parent":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\base\\Int.js","resolved":"C:\\Users\\pc\\Desktop\\MyCode\\Rust\\Project\\Kusama-Network-Proxy-Visualizer\\node_modules\\@polkadot\\types-codec\\abstract\\Int.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Int = void 0;\n\nvar _Int2 = require(\"../abstract/Int.js\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\nvar Int = /*#__PURE__*/function (_AbstractInt) {\n  _inherits(Int, _AbstractInt);\n\n  var _super = _createSuper(Int);\n\n  function Int(registry) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var bitLength = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Int);\n\n    return _super.call(this, registry, value, bitLength, true);\n  }\n\n  _createClass(Int, null, [{\n    key: \"with\",\n    value: function _with(bitLength, typeName) {\n      return /*#__PURE__*/function (_Int) {\n        _inherits(_class, _Int);\n\n        var _super2 = _createSuper(_class);\n\n        function _class(registry, value) {\n          _classCallCheck(this, _class);\n\n          return _super2.call(this, registry, value, bitLength);\n        }\n\n        _createClass(_class, [{\n          key: \"toRawType\",\n          value: function toRawType() {\n            return typeName || _get(_getPrototypeOf(_class.prototype), \"toRawType\", this).call(this);\n          }\n        }]);\n\n        return _class;\n      }(Int);\n    }\n  }]);\n\n  return Int;\n}(_Int2.AbstractInt);\n\nexports.Int = Int;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":3,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":4,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":5,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":6,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":7,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":8,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":9,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":10,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":11,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":12,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":13,"column":0}},{"generated":{"line":46,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":15,"column":13},"name":"Int"},{"generated":{"line":51,"column":2},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":2}},{"generated":{"line":51,"column":15},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":14},"name":"registry"},{"generated":{"line":51,"column":23},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":2}},{"generated":{"line":51,"column":25},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":52,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":52,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":24},"name":"value"},{"generated":{"line":52,"column":13},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":52,"column":84},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":32}},{"generated":{"line":52,"column":85},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":53,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":53,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":35},"name":"bitLength"},{"generated":{"line":53,"column":17},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":55,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":57,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":57,"column":29},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":17,"column":10},"name":"registry"},{"generated":{"line":57,"column":37},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":57,"column":39},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":17,"column":20},"name":"value"},{"generated":{"line":57,"column":44},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":57,"column":46},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":17,"column":27},"name":"bitLength"},{"generated":{"line":57,"column":55},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":57,"column":57},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":17,"column":38}},{"generated":{"line":57,"column":61},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":16,"column":46}},{"generated":{"line":58,"column":2},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":18,"column":3}},{"generated":{"line":62,"column":11},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":2}},{"generated":{"line":62,"column":26},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":14},"name":"bitLength"},{"generated":{"line":62,"column":35},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":2}},{"generated":{"line":62,"column":37},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":25},"name":"typeName"},{"generated":{"line":62,"column":45},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":2}},{"generated":{"line":62,"column":47},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":20,"column":35}},{"generated":{"line":63,"column":6},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":64,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":66,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":68,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":6}},{"generated":{"line":68,"column":24},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":18},"name":"registry"},{"generated":{"line":68,"column":32},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":6}},{"generated":{"line":68,"column":34},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":28},"name":"value"},{"generated":{"line":68,"column":39},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":6}},{"generated":{"line":68,"column":41},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":69,"column":10},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":71,"column":10},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":71,"column":36},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":23,"column":14},"name":"registry"},{"generated":{"line":71,"column":44},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":71,"column":46},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":23,"column":24},"name":"value"},{"generated":{"line":71,"column":51},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":71,"column":53},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":23,"column":31},"name":"bitLength"},{"generated":{"line":71,"column":62},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":22,"column":35}},{"generated":{"line":72,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":24,"column":7}},{"generated":{"line":74,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":75,"column":10},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":76,"column":10},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":76,"column":17},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":26,"column":6}},{"generated":{"line":76,"column":38},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":26,"column":18}},{"generated":{"line":77,"column":12},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":27,"column":8}},{"generated":{"line":77,"column":19},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":27,"column":15},"name":"typeName"},{"generated":{"line":77,"column":27},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":27,"column":23}},{"generated":{"line":77,"column":100},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":27,"column":8}},{"generated":{"line":78,"column":10},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":28,"column":7}},{"generated":{"line":79,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":81,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":82,"column":6},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":82,"column":8},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":25},"name":"Int"},{"generated":{"line":82,"column":11},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":21,"column":4}},{"generated":{"line":83,"column":4},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":31,"column":3}},{"generated":{"line":87,"column":2},"source":"node_modules/@polkadot/types-codec/base/Int.js","original":{"line":15,"column":25},"name":"AbstractInt"}],"sources":{"node_modules/@polkadot/types-codec/base/Int.js":"// Copyright 2017-2022 @polkadot/types-codec authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"../abstract/Int.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport class Int extends AbstractInt {\n  constructor(registry, value = 0, bitLength) {\n    super(registry, value, bitLength, true);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}"},"lineCount":null}},"error":null,"hash":"bff08a1d1ad011fd6b6af7748f33e7e2","cacheData":{"env":{}}}