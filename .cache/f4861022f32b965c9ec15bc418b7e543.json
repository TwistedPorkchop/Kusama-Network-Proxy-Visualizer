{"dependencies":[{"name":"./extractPath.js","loc":{"line":3,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyExtractSuri = keyExtractSuri;\n\nvar _extractPath = require(\"./extractPath.js\");\n\nconst RE_CAPTURE = /^(\\w+( \\w+)*)((\\/\\/?[^/]+)*)(\\/\\/\\/(.*))?$/;\n/**\n * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).\n */\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction keyExtractSuri(suri) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const matches = suri.match(RE_CAPTURE);\n\n  if (matches === null) {\n    throw new Error('Unable to match provided value to a secret URI');\n  }\n\n  const [, phrase,, derivePath,,, password] = matches;\n  const {\n    path\n  } = (0, _extractPath.keyExtractPath)(derivePath);\n  return {\n    derivePath,\n    password,\n    path,\n    phrase\n  };\n}"},"hash":"3360a885dd5942039fc08b36ff006f9f"}