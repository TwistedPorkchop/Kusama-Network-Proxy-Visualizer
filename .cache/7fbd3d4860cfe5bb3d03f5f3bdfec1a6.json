{"dependencies":[{"name":"../bn/index.js","loc":{"line":3,"column":52}},{"name":"../u8a/index.js","loc":{"line":4,"column":32}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compactToU8a = compactToU8a;\n\nvar _index = require(\"../bn/index.js\");\n\nvar _index2 = require(\"../u8a/index.js\");\n\n// Copyright 2017-2022 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_U8 = _index.BN_TWO.pow(new _index.BN(8 - 2)).isub(_index.BN_ONE);\nconst MAX_U16 = _index.BN_TWO.pow(new _index.BN(16 - 2)).isub(_index.BN_ONE);\nconst MAX_U32 = _index.BN_TWO.pow(new _index.BN(32 - 2)).isub(_index.BN_ONE);\nconst BL_16 = {\n  bitLength: 16\n};\nconst BL_32 = {\n  bitLength: 32\n};\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\n\nfunction compactToU8a(value) {\n  const bn = (0, _index.bnToBn)(value);\n\n  if (bn.lte(MAX_U8)) {\n    return new Uint8Array([bn.toNumber() << 2]);\n  } else if (bn.lte(MAX_U16)) {\n    return (0, _index.bnToU8a)(bn.shln(2).iadd(_index.BN_ONE), BL_16);\n  } else if (bn.lte(MAX_U32)) {\n    return (0, _index.bnToU8a)(bn.shln(2).iadd(_index.BN_TWO), BL_32);\n  }\n\n  const u8a = (0, _index.bnToU8a)(bn);\n  let length = u8a.length; // adjust to the minimum number of bytes\n\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n\n  if (length < 4) {\n    throw new Error('Invalid length, previous checks match anything less than 2^30');\n  }\n\n  return (0, _index2.u8aConcatStrict)([// subtract 4 as minimum (also catered for in decoding)\n  new Uint8Array([(length - 4 << 2) + 0b11]), u8a.subarray(0, length)]);\n}"},"hash":"9fcba741bb448c0172763b25c868ff7b"}