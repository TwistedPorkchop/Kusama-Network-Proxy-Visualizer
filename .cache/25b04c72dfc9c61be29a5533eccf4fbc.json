{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":32}},{"name":"./hasher.js","loc":{"line":4,"column":23}},{"name":"./recover.js","loc":{"line":5,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.secp256k1Verify = secp256k1Verify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _hasher = require(\"./hasher.js\");\n\nvar _recover = require(\"./recover.js\");\n\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {\n  const sig = (0, _util.u8aToU8a)(signature);\n\n  if (sig.length !== 65) {\n    throw new Error(`Expected signature with 65 bytes, ${sig.length} found instead`);\n  }\n\n  const publicKey = (0, _recover.secp256k1Recover)((0, _hasher.hasher)(hashType, msgHash), sig, sig[64], hashType, onlyJs);\n  const signerAddr = (0, _hasher.hasher)(hashType, publicKey, onlyJs);\n  const inputAddr = (0, _util.u8aToU8a)(address); // for Ethereum (keccak) the last 20 bytes is the address\n\n  return (0, _util.u8aEq)(publicKey, inputAddr) || (hashType === 'keccak' ? (0, _util.u8aEq)(signerAddr.slice(-20), inputAddr.slice(-20)) : (0, _util.u8aEq)(signerAddr, inputAddr));\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"f0b72676e78e265064d4da91abe7cc9c"}