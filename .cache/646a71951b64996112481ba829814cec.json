{"dependencies":[{"name":"@polkadot/util","loc":{"line":4,"column":47}},{"name":"../base58/index.js","loc":{"line":5,"column":29}},{"name":"./checksum.js","loc":{"line":6,"column":37}},{"name":"./defaults.js","loc":{"line":7,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeAddress = decodeAddress;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _index = require(\"../base58/index.js\");\n\nvar _checksum = require(\"./checksum.js\");\n\nvar _defaults = require(\"./defaults.js\");\n\n// Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6\nfunction decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {\n  (0, _util.assert)(encoded, 'Invalid empty address passed');\n\n  if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) {\n    return (0, _util.u8aToU8a)(encoded);\n  }\n\n  try {\n    const decoded = (0, _index.base58Decode)(encoded);\n    (0, _util.assert)(_defaults.defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');\n    const [isValid, endPos, ss58Length, ss58Decoded] = (0, _checksum.checkAddressChecksum)(decoded);\n    (0, _util.assert)(ignoreChecksum || isValid, 'Invalid decoded address checksum');\n    (0, _util.assert)([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);\n    return decoded.slice(ss58Length, endPos);\n  } catch (error) {\n    throw new Error(`Decoding ${encoded}: ${error.message}`);\n  }\n}"},"hash":"d5a6fb4915f641a42a375380dee12241"}