{"dependencies":[{"name":"@polkadot/util","loc":{"line":3,"column":28}},{"name":"@polkadot/wasm-crypto","loc":{"line":4,"column":43}},{"name":"../pbkdf2/index.js","loc":{"line":5,"column":29}},{"name":"./toEntropy.js","loc":{"line":6,"column":34}},{"name":"./validate.js","loc":{"line":7,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mnemonicToMiniSecret = mnemonicToMiniSecret;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _index = require(\"../pbkdf2/index.js\");\n\nvar _toEntropy = require(\"./toEntropy.js\");\n\nvar _validate = require(\"./validate.js\");\n\nfunction mnemonicToMiniSecret(mnemonic, password = '', onlyJs) {\n  if (!(0, _validate.mnemonicValidate)(mnemonic)) {\n    throw new Error('Invalid bip39 mnemonic specified');\n  }\n\n  if (!onlyJs && (0, _wasmCrypto.isReady)()) {\n    return (0, _wasmCrypto.bip39ToMiniSecret)(mnemonic, password);\n  }\n\n  const entropy = (0, _toEntropy.mnemonicToEntropy)(mnemonic);\n  const salt = (0, _util.stringToU8a)(`mnemonic${password}`); // return the first 32 bytes as the seed\n\n  return (0, _index.pbkdf2Encode)(entropy, salt).password.slice(0, 32);\n} // Copyright 2017-2022 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0"},"hash":"8478fe6dd455ce2b9b0d87b4fb7a8e5d"}